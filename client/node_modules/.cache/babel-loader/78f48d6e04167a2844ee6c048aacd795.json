{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/portfolio-react/client/src/components/ProjectReview/GalleryContainer/GalleryContainer.js\";\nimport React, { Component } from \"react\";\nimport \"./GalleryContainer.scss\";\nimport SliderCarousel from \"./SliderCarousel/SliderCarousel\";\nimport SliderFor from \"./SliderFor/SliderFor\";\n\nclass GalleryContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      zoomState: false,\n      allImages: null,\n      currentImage: {\n        index: 1,\n        imgSrc: null\n      },\n      carousel: {\n        transform: null\n      }\n    };\n  } //TODO: must change that for dynamical taking images from folder\n\n\n  componentDidMount() {\n    const createImagesList = () => {\n      let path = `../../../img/employees/${this.props.path}``../../../img/employees/name-surname/projects/view-from-the-top`;\n      console.log(path);\n      let allImages = [];\n      allImages = this.props.projectData.images.map(image => {//   return require(`${path}/${image}`);\n      });\n    };\n\n    const allImages = createImagesList();\n    const firstImage = allImages[0];\n    this.setState({\n      allImages,\n      currentImage: {\n        index: 1,\n        imgSrc: firstImage\n      }\n    });\n  }\n\n  render() {\n    //slider\n    const changeCarouselImage = type => {\n      const currentImage = { ...this.state.currentImage\n      };\n      const zoomState = this.state.zoomState;\n      let index = currentImage.index;\n      let imgSrc = currentImage.src;\n\n      const changingImage = (index, imgSrc) => {\n        this.setState({\n          zoomState,\n          currentImage: {\n            index,\n            imgSrc\n          }\n        });\n      };\n\n      if (this.state.allImages && this.state.allImages.length > 1) {\n        if (type === \"prev\") {\n          if (currentImage.index > 1) {\n            index--;\n            imgSrc = this.state.allImages[index - 1];\n            changingImage(index, imgSrc);\n          } else {\n            index = this.state.allImages.length - 1;\n            imgSrc = this.state.allImages[index];\n            changingImage(index, imgSrc);\n          }\n        }\n\n        if (type === \"next\") {\n          if (currentImage.index < this.state.allImages.length) {\n            index++;\n            imgSrc = this.state.allImages[index - 1];\n            changingImage(index, imgSrc);\n          } else {\n            index = 1;\n            imgSrc = this.state.allImages[index - 1];\n            changingImage(index, imgSrc);\n          }\n        }\n      }\n    };\n\n    const prevArrowClickHandler = () => {\n      changeCarouselImage(\"prev\");\n    };\n\n    const nextArrowClickHandler = () => {\n      changeCarouselImage(\"next\");\n    }; //change zooming\n\n\n    const zoomClickHandler = () => {\n      let zoomState = this.state.zoomState;\n      zoomState = !zoomState;\n      this.setState({\n        zoomState\n      });\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"galleryContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(SliderFor // allImages={this.state.allImages}\n    , {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(SliderCarousel, {\n      prevArrowClickHandler: prevArrowClickHandler,\n      nextArrowClickHandler: nextArrowClickHandler,\n      imgSrc: this.state.currentImage.imgSrc,\n      zoomState: this.state.zoomState,\n      zoomClickHandler: zoomClickHandler,\n      idCarousel: this.state.zoomState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default GalleryContainer;","map":{"version":3,"sources":["/home/superproger/workspace/portfolio-react/client/src/components/ProjectReview/GalleryContainer/GalleryContainer.js"],"names":["React","Component","SliderCarousel","SliderFor","GalleryContainer","constructor","props","state","zoomState","allImages","currentImage","index","imgSrc","carousel","transform","componentDidMount","createImagesList","path","console","log","projectData","images","map","image","firstImage","setState","render","changeCarouselImage","type","src","changingImage","length","prevArrowClickHandler","nextArrowClickHandler","zoomClickHandler"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./GalleryContainer.scss\";\nimport SliderCarousel from \"./SliderCarousel/SliderCarousel\";\nimport SliderFor from \"./SliderFor/SliderFor\";\n\nclass GalleryContainer extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         zoomState: false,\n         allImages: null,\n         currentImage: {\n            index: 1,\n            imgSrc: null,\n         },\n         carousel: {\n            transform: null,\n         },\n      };\n   }\n\n   //TODO: must change that for dynamical taking images from folder\n   componentDidMount() {\n      const createImagesList = () => {\n         let path = `../../../img/employees/${this.props.path}``../../../img/employees/name-surname/projects/view-from-the-top`;\n         console.log(path)\n         let allImages = [];\n         allImages = this.props.projectData.images.map((image) => {\n\n         //   return require(`${path}/${image}`);\n         });\n      };\n      const allImages = createImagesList();\n      const firstImage = allImages[0];\n      this.setState({\n         allImages,\n         currentImage: {\n            index: 1,\n            imgSrc: firstImage,\n         },\n      });\n   }\n\n   render() {\n      //slider\n      const changeCarouselImage = (type) => {\n         const currentImage = { ...this.state.currentImage };\n         const zoomState = this.state.zoomState;\n         let index = currentImage.index;\n         let imgSrc = currentImage.src;\n         const changingImage = (index, imgSrc) => {\n            this.setState({\n               zoomState,\n               currentImage: {\n                  index,\n                  imgSrc,\n               },\n            });\n         };\n         if (this.state.allImages && this.state.allImages.length > 1) {\n            if (type === \"prev\") {\n               if (currentImage.index > 1) {\n                  index--;\n                  imgSrc = this.state.allImages[index - 1];\n                  changingImage(index, imgSrc);\n               } else {\n                  index = this.state.allImages.length - 1;\n                  imgSrc = this.state.allImages[index];\n                  changingImage(index, imgSrc);\n               }\n            }\n            if (type === \"next\") {\n               if (currentImage.index < this.state.allImages.length) {\n                  index++;\n                  imgSrc = this.state.allImages[index - 1];\n                  changingImage(index, imgSrc);\n               } else {\n                  index = 1;\n                  imgSrc = this.state.allImages[index - 1];\n                  changingImage(index, imgSrc);\n               }\n            }\n         }\n      };\n      const prevArrowClickHandler = () => {\n         changeCarouselImage(\"prev\");\n      };\n      const nextArrowClickHandler = () => {\n         changeCarouselImage(\"next\");\n      };\n      //change zooming\n      const zoomClickHandler = () => {\n         let zoomState = this.state.zoomState;\n         zoomState = !zoomState;\n         this.setState({\n            zoomState,\n         });\n      };\n\n      return (\n         <div className=\"galleryContainer\">\n            <SliderFor\n            // allImages={this.state.allImages}\n            />\n            <SliderCarousel\n               prevArrowClickHandler={prevArrowClickHandler}\n               nextArrowClickHandler={nextArrowClickHandler}\n               imgSrc={this.state.currentImage.imgSrc}\n               zoomState={this.state.zoomState}\n               zoomClickHandler={zoomClickHandler}\n               idCarousel={this.state.zoomState}\n            />\n         </div>\n      );\n   }\n}\nexport default GalleryContainer;\n"]},"metadata":{},"sourceType":"module"}